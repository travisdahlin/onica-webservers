AWSTemplateFormatVersion: "2010-09-09"
Description: "Simple web site, load balanced, scalable, highly available"

Parameters:
  KeyName:
    Description: Name of SSH Keypair
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: Must be an existing SSH keypair

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: webservers_vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: webservers_internet_gateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: "us-west-2a"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public_subnet_a

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: "us-west-2b"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public_subnet_b

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: public_route_table

  PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      AllocationId:
        Fn::GetAtt:
          - EIP
          - AllocationId

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: "us-west-2a"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: private_subnet_a

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: "us-west-2b"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: private_subnet_b

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: private_route_table

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway

  SubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable

  SubnetRouteTableAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: alb_security_group
      GroupDescription: Allow http access to alb on 80
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      UnhealthyThresholdCount: 10
      HealthCheckPath: /
      Port: 80
      Protocol: HTTP
      VpcId:
        Ref: VPC
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "60"

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      SecurityGroups:
        - Ref: ALBSecurityGroup

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: web_server_security_group
      GroupDescription: Allow http access to webservers on 80
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:
            Ref: ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 68.5.115.159/32

  WebServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0ad99772
      KeyName:
        Ref: KeyName
      AssociatePublicIpAddress: true
      SecurityGroups:
        - Ref: WebServerSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          sudo yum update -y
          sudo yum install stress httpd -y
          publichost=$(curl http://169.254.169.254/latest/meta-data/public-hostname)
          localhost=$(curl http://169.254.169.254/latest/meta-data/local-hostname)
          host=$(hostname)
          echo "<html>
                  <head>
                    <title>Onica Test</title>
                  </head>
                  <body>
                    <h3>Hello, world!</h3>
                    <br />
                    <p>
                      My name is <strong>$publichost</strong>, my friends 
                      call me <strong>$localhost</strong>, but you can call 
                      me <strong>$host</strong>
                    </p>
                  </body>
                </html>" > /var/www/html/index.html
          sudo service httpd start

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - "us-west-2a"
        - "us-west-2b"
      VPCZoneIdentifier:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      LaunchConfigurationName:
        Ref: "WebServerLaunchConfig"
      MinSize: "2"
      MaxSize: "4"
      DesiredCapacity: "2"
      TargetGroupARNs:
        - Ref: "ALBTargetGroup"
      Cooldown: "120"
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - "GroupMinSize"
            - "GroupMaxSize"
            - "GroupDesiredCapacity"
            - "GroupInServiceInstances"
            - "GroupTotalInstances"
    DependsOn: PublicDefaultRoute

  WebServerScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        Ref: WebServerGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 25
      Cooldown: "120"

Outputs:
  URL:
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - ApplicationLoadBalancer
              - DNSName
    Description: Application URL
